import { jest } from '@jest/globals';
import { isProductionEnvironment, isDevelopmentEnvironment, isTestEnvironment, DUMMY_PASSWORD } from './constants';
import { generateDummyPassword } from './db/utils';

// Mock the generateDummyPassword
jest.mock('./db/utils', () => ({
  generateDummyPassword: jest.fn(() => 'mocked-dummy-password'),
}));

describe('constants', () => {
  describe('environment checks', () => {
    afterEach(() => {
      delete process.env.NODE_ENV;
      delete process.env.PLAYWRIGHT_TEST_BASE_URL;
      delete process.env.PLAYWRIGHT;
      delete process.env.CI_PLAYWRIGHT;
    });

    describe('isProductionEnvironment', () => {
      it('returns true when NODE_ENV is production', () => {
        process.env.NODE_ENV = 'production';
        expect(isProductionEnvironment).toBe(true);
      });

      it('returns false when NODE_ENV is not production', () => {
        process.env.NODE_ENV = 'development';
        expect(isProductionEnvironment).toBe(false);
      });

      it('returns false when NODE_ENV is undefined', () => {
        delete process.env.NODE_ENV;
        expect(isProductionEnvironment).toBe(false);
      });
    });

    describe('isDevelopmentEnvironment', () => {
      it('returns true when NODE_ENV is development', () => {
        process.env.NODE_ENV = 'development';
        expect(isDevelopmentEnvironment).toBe(true);
      });

      it('returns false when NODE_ENV is not development', () => {
        process.env.NODE_ENV = 'production';
        expect(isDevelopmentEnvironment).toBe(false);
      });

      it('returns false when NODE_ENV is undefined', () => {
        delete process.env.NODE_ENV;
        expect(isDevelopmentEnvironment).toBe(false);
      });
    });

    describe('isTestEnvironment', () => {
      it('returns true when PLAYWRIGHT_TEST_BASE_URL is set', () => {
        process.env.PLAYWRIGHT_TEST_BASE_URL = 'http://localhost:3000';
        expect(isTestEnvironment).toBe(true);
      });

      it('returns true when PLAYWRIGHT is set', () => {
        process.env.PLAYWRIGHT = '1';
        expect(isTestEnvironment).toBe(true);
      });

      it('returns true when CI_PLAYWRIGHT is set', () => {
        process.env.CI_PLAYWRIGHT = 'true';
        expect(isTestEnvironment).toBe(true);
      });

      it('returns false when none of the test env vars are set', () => {
        expect(isTestEnvironment).toBe(false);
      });
    });
  });

  describe('DUMMY_PASSWORD', () => {
    it('is a string generated by generateDummyPassword', () => {
      const { generateDummyPassword: mockGenerate } = require('./db/utils') as any;
      expect(mockGenerate).toHaveBeenCalled();
      expect(DUMMY_PASSWORD).toBe('mocked-dummy-password');
    });
  });
});

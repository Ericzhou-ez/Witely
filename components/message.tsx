\"use client\";\nimport equal from \"fast-deep-equal\";\nimport { motion } from \"framer-motion\";\nimport { memo } from \"react\";\nimport type { Vote } from \"@/lib/db/schema\";\nimport type { ChatMessage } from \"@/lib/types\";\nimport { cn, sanitizeText } from \"@/lib/utils\";\nimport { useDataStream } from \"./data-stream-provider\";\nimport { DocumentToolResult } from \"./document\";\nimport { DocumentPreview } from \"./document-preview\";\nimport { MessageContent } from \"./elements/message\";\nimport { Response } from \"./elements/response\";\nimport {\n  Tool,\n  ToolContent,\n  ToolHeader,\n  ToolInput,\n  ToolOutput,\n} from \"./elements/tool\";\nimport { MessageActions } from \"./message-actions\";\nimport { MessageReasoning } from \"./message-reasoning\";\nimport { PreviewAttachment } from \"./preview-attachment\";\nimport { Weather } from \"./weather\";\n\n/**\n * Pure component for rendering a preview message without memoization.\n *\n * This component handles the rendering of chat messages including text, tools, attachments, and reasoning.\n * It supports different roles (user/assistant) and various part types like text, file, reasoning, and tool calls.\n *\n * @param {Object} props - Component props\n * @param {string} props.chatId - The ID of the chat session.\n * @param {ChatMessage} props.message - The message object containing role and parts.\n * @param {Vote | undefined} props.vote - The vote associated with the message.\n * @param {boolean} props.isLoading - Indicates if the message is in a loading state.\n * @param {boolean} props.isReadonly - Indicates if the chat is in readonly mode.\n * @param {boolean} props.requiresScrollPadding - Determines if scroll padding is needed for the message.\n *\n * @returns {JSX.Element} The rendered message component.\n */\nconst PurePreviewMessage = ({\n  chatId,\n  message,\n  vote,\n  isLoading,\n  isReadonly,\n  requiresScrollPadding,\n}: {\n  chatId: string;\n  message: ChatMessage;\n  vote: Vote | undefined;\n  isLoading: boolean;\n  isReadonly: boolean;\n  requiresScrollPadding: boolean;\n}) => {\n  const attachmentsFromMessage = message.parts.filter(\n    (part) => part.type === \"file\"\n  );\n\n  useDataStream();\n\n  return (\n    <motion.div\n      animate={{ opacity: 1 }}\n      className=\"group/message w-full\"\n      data-role={message.role}\n      data-testid={`message-${message.role}`}\n      initial={{ opacity: 0 }}\n    >\n      <div\n        className={cn(\"flex w-full items-start gap-2 md:gap-3\", {\n          \"justify-end\": message.role === \"user\",\n          \"justify-start\": message.role === \"assistant\",\n        })}\n      >\n        <div\n          className={cn(\"flex flex-col\", {\n            \"gap-2 md:gap-4\": message.parts?.some(\n              (p) => p.type === \"text\" && p.text?.trim()\n            ),\n            \"min-h-96\":\n              message.role === \"assistant\" &&\n              requiresScrollPadding &&\n              message.parts?.some((p) => p.type === \"text\" && p.text?.trim()),\n            \"w-full\":\n              message.role === \"assistant\" &&\n              message.parts?.some((p) => p.type === \"text\" && p.text?.trim()),\n            \"max-w-[calc(100%-2.5rem)] sm:max-w-[min(fit-content,80%)]\":\n              message.role === \"user\",\n          })}\n        >\n          {message.parts?.map((part, index) => {\n            const { type } = part;\n            const key = `message-${message.id}-part-${index}`;\n\n            if (type === \"reasoning\" && part.text?.trim().length > 0) {\n              return (\n                <MessageReasoning\n                  isLoading={isLoading}\n                  key={key}\n                  reasoning={part.text}\n                />\n              );\n            }\n\n            if (type === \"text\") {\n              return (\n                <div\n                  className={cn(\"flex flex-col gap-2\", {\n                    \"items-end\": message.role === \"user\",\n                    \"items-start\": message.role === \"assistant\",\n                  })}\n                  data-testid=\"message-text-container\"\n                  key={key}\n                >\n                  <MessageContent\n                    className={cn({\n                      \"user-message-text !rounded-bl-xl w-fit break-words rounded-2xl border border-sidebar-border px-4 py-2.5\":\n                        message.role === \"user\",\n                      \"bg-transparent px-0 py-0 text-left\":\n                        message.role === \"assistant\",\n                    })}\n                    data-testid=\"message-content\"\n                    style={\n                      message.role === \"user\"\n                        ? {\n                            backgroundColor: \"var(--sidebar-background)\",\n                            color: \"var(--foreground)\",\n                          }\n                        : undefined\n                    }\n                  >\n                    <Response>{sanitizeText(part.text)}</Response>\n                  </MessageContent>\n\n                  {attachmentsFromMessage.length > 0 && (\n                    <div\n                      className=\"flex flex-row gap-2\"\n                      data-testid={\"message-attachments\"}\n                    >\n                      {attachmentsFromMessage.map((attachment) => {\n                        const fileAttachment = attachment as {\n                          name?: string;\n                          mediaType?: string;\n                          url?: string;\n                        };\n                        return (\n                          <PreviewAttachment\n                            attachment={{\n                              name: fileAttachment.name ?? \"file\",\n                              contentType:\n                                fileAttachment.mediaType ??\n                                \"application/octet-stream\",\n                              url: fileAttachment.url ?? \"\",\n                            }}\n                            key={\n                              fileAttachment.url ??\n                              `attachment-${Math.random()}`\n                            }\n                          />\n                        );\n                      })}\n                    </div>\n                  )}\n                </div>\n              );\n            }\n\n            if (type === \"tool-getWeather\") {\n              const { toolCallId, state } = part;\n\n              return (\n                <Tool defaultOpen={true} key={toolCallId} data-testid={`tool-getWeather-${toolCallId}`}>\n                  <ToolHeader state={state} type=\"tool-getWeather\" />\n                  <ToolContent>\n                    {state === \"input-available\" && (\n                      <ToolInput input={part.input} />\n                    )}\n                    {state === \"output-available\" && (\n                      <ToolOutput\n                        errorText={undefined}\n                        output={<Weather weatherAtLocation={part.output} />}\n                      />\n                    )}\n                  </ToolContent>\n                </Tool>\n              );\n            }\n\n            if (type === \"tool-createDocument\") {\n              const { toolCallId } = part;\n\n              if (part.output && \"error\" in part.output) {\n                return (\n                  <div\n                    className=\"rounded-lg border border-red-200 bg-red-50 p-4 text-red-500 dark:bg-red-950/50\"\n                    key={toolCallId}\n                    data-testid={`tool-createDocument-error-${toolCallId}`}\n                  >\n                    Error creating document: {String(part.output.error)}\n                  </div>\n                );\n              }\n\n              return (\n                <DocumentPreview\n                  isReadonly={isReadonly}\n                  key={toolCallId}\n                  result={part.output}\n                />\n              );\n            }\n\n            if (type === \"tool-updateDocument\") {\n              const { toolCallId } = part;\n\n              if (part.output && \"error\" in part.output) {\n                return (\n                  <div\n                    className=\"rounded-lg border border-red-200 bg-red-50 p-4 text-red-500 dark:bg-red-950/50\"\n                    key={toolCallId}\n                    data-testid={`tool-updateDocument-error-${toolCallId}`}\n                  >\n                    Error updating document: {String(part.output.error)}\n                  </div>\n                );\n              }\n\n              return (\n                <div className=\"relative\" key={toolCallId}>\n                  <DocumentPreview\n                    args={{ ...part.output, isUpdate: true }}\n                    isReadonly={isReadonly}\n                    result={part.output}\n                  />\n                </div>\n              );\n            }\n\n            if (type === \"tool-requestSuggestions\") {\n              const { toolCallId, state } = part;\n\n              return (\n                <Tool defaultOpen={true} key={toolCallId} data-testid={`tool-requestSuggestions-${toolCallId}`}>\n                  <ToolHeader state={state} type=\"tool-requestSuggestions\" />\n                  <ToolContent>\n                    {state === \"input-available\" && (\n                      <ToolInput input={part.input} />\n                    )}\n                    {state === \"output-available\" && (\n                      <ToolOutput\n                        errorText={undefined}\n                        output={\n                          \"error\" in part.output ? (\n                            <div className=\"rounded border p-2 text-red-500\" data-testid={`tool-requestSuggestions-error-${toolCallId}`}>\n                              Error: {String(part.output.error)}\n                            </div>\n                          ) : (\n                            <DocumentToolResult\n                              isReadonly={isReadonly}\n                              result={part.output}\n                              type=\"request-suggestions\"\n                            />\n                          )\n                        }\n                      />\n                    )}\n                  </ToolContent>\n                </Tool>\n              );\n            }\n\n            return null;\n          })}\n\n          {!isReadonly && (\n            <MessageActions\n              chatId={chatId}\n              isLoading={isLoading}\n              key={`action-${message.id}`}\n              message={message}\n              vote={vote}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport const PreviewMessage = memo(\n  PurePreviewMessage,\n  (prevProps, nextProps) => {\n    if (prevProps.isLoading !== nextProps.isLoading) {\n      return false;\n    }\n    if (prevProps.message.id !== nextProps.message.id) {\n      return false;\n    }\n    if (prevProps.requiresScrollPadding !== nextProps.requiresScrollPadding) {\n      return false;\n    }\n    if (!equal(prevProps.message.parts, nextProps.message.parts)) {\n      return false;\n    }\n    if (!equal(prevProps.vote, nextProps.vote)) {\n      return false;\n    }\n\n    return true;\n  }\n);\n\n/**\n * Renders a thinking message for the assistant while processing.\n *\n * @returns {JSX.Element} The thinking message component.\n */\nexport const ThinkingMessage = () => {\n  const role = \"assistant\";\n\n  return (\n    <motion.div\n      animate={{ opacity: 1 }}\n      className=\"group/message w-full\"\n      data-role={role}\n      data-testid=\"message-assistant-loading\"\n      initial={{ opacity: 0 }}\n    >\n      <div className=\"flex items-start justify-start gap-3\">\n        <div className=\"flex w-full flex-col gap-2 md:gap-4\">\n          <div className=\"p-0 text-muted-foreground text-sm\">\n            <LoadingText>Thinking...</LoadingText>\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nconst LoadingText = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <motion.div\n      animate={{ backgroundPosition: [\"100% 50%\", \"-100% 50%\"] }}\n      className=\"flex items-center text-transparent\"\n      style={{\n        background:\n          \"linear-gradient(90deg, hsl(var(--muted-foreground)) 0%, hsl(var(--muted-foreground)) 35%, hsl(var(--foreground)) 50%, hsl(var(--muted-foreground)) 65%, hsl(var(--muted-foreground)) 100%)\",\n        backgroundSize: \"200% 100%\",\n        WebkitBackgroundClip: \"text\",\n        backgroundClip: \"text\",\n      }}\n      transition={{\n        duration: 1.5,\n        repeat: Number.POSITIVE_INFINITY,\n        ease: \"linear\",\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n};\n